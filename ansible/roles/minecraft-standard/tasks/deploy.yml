---
- name: Create custom client ID
  shell: tr -dc 'a-zA-Z0-9' </dev/urandom | fold -w 8 | head -1 |tr [[:upper:]] [[:lower:]]
  register: CLIENT_SEED
  tags:
    - assign-id
    - deploy

- name: Bind a single port to the new MC server instance for client {{ CLIENT_SEED.stdout }}
  shell: expr 25565 + $(sudo kubectl get svc -A |grep 255 |awk '{ print $6 }' |cut -d'/' -f1 |wc -l)
  register: MC_SERVER_PORT
  tags:
    - assign-port
    - deploy

- name: Create client server data directory
  file:
    path: /data/{{ CLIENT_SEED.stdout }}-data
    state: directory
  tags:
    - create-data-directory
    - deploy

- name: Copy deployment file to K8S node
  copy:
    dest: /tmp/minecraft-{{ CLIENT_SEED.stdout }}.yaml
    content: |
      apiVersion: v1
      kind: Namespace
      metadata:
        name:  client-{{ CLIENT_SEED.stdout }}
      ---
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: {{ CLIENT_SEED.stdout }}-data
        namespace: client-{{ CLIENT_SEED.stdout }}
      spec:
        capacity:
          storage: 10Gi # Consider multiple storage options
        volumeMode: Filesystem
        accessModes:
        - ReadWriteOnce
        persistentVolumeReclaimPolicy: Delete
        storageClassName: local-storage
        local:
          path: /data/{{ CLIENT_SEED.stdout }}-data
        nodeAffinity:
          required:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - {{ KUBERNETES_NODE }}
      ---
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: {{ CLIENT_SEED.stdout }}-data-pvc
        namespace: client-{{ CLIENT_SEED.stdout }}
      spec:
        storageClassName: local-storage
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
      ---
      apiVersion: v1
      data:
        allow-flight: "true"
        gamemode: survival
        max-players: "5" # Consider multiple slot options
        motd: CloudCraft server
        server-port: "25565"
        level-type: "default"
        generate-structures: "false"
        enable-command-block: "true"
        max-world-size: "1000"
      kind: ConfigMap
      metadata:
        name: server-properties
        namespace: client-{{ CLIENT_SEED.stdout }}
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{ CLIENT_SEED.stdout }}-server
        namespace: client-{{ CLIENT_SEED.stdout }}
        labels:
          app: {{ CLIENT_SEED.stdout }}-server
      spec:
        revisionHistoryLimit: 1
        strategy:
          type: Recreate
        replicas: 1
        selector:
          matchLabels:
            app: {{ CLIENT_SEED.stdout }}-server
        template:
          metadata:
            labels:
              app: {{ CLIENT_SEED.stdout }}-server
          spec:
            volumes:
            - name: {{ CLIENT_SEED.stdout }}-data
              persistentVolumeClaim:
                claimName: {{ CLIENT_SEED.stdout }}-data-pvc
            containers:
            - name: {{ CLIENT_SEED.stdout }}-server
              image: itzg/minecraft-server:latest
              resources:
                limits:
                  memory: 2Gi
                requests:
                  memory: 1Gi
              env:
                - name:  EULA
                  value: 'TRUE'
                - name: SERVER_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: server-properties
                      key: server-port
                - name: MODE
                  valueFrom:
                    configMapKeyRef:
                      name: server-properties
                      key: gamemode
                - name: MOTD
                  valueFrom:
                    configMapKeyRef:
                      name: server-properties
                      key: motd
                - name: ALLOW_FLIGHT
                  valueFrom:
                    configMapKeyRef:
                      name: server-properties
                      key: allow-flight
                - name: MAX_PLAYERS
                  valueFrom:
                    configMapKeyRef:
                      name: server-properties
                      key: max-players
                - name: LEVEL_TYPE
                  valueFrom:
                    configMapKeyRef:
                      name: server-properties
                      key: level-type
                - name: ENABLE_COMMAND_BLOCK
                  valueFrom:
                    configMapKeyRef:
                      name: server-properties
                      key: enable-command-block
                - name: MAX_WORLD_SIZE
                  valueFrom:
                    configMapKeyRef:
                      name: server-properties
                      key: max-world-size
              lifecycle:
                preStop:
                  exec:
                    command: ["/bin/sh", "-c", "mv -f /data/server.properties /data/server.properties.old"]
              ports:
              - containerPort: 25565
                name: {{ CLIENT_SEED.stdout }}-server
              volumeMounts:
                - name: {{ CLIENT_SEED.stdout }}-data
                  mountPath:  /data
              readinessProbe:
                exec:
                  command:
                  - echo
                initialDelaySeconds: 30
                periodSeconds: 30
              livenessProbe:
                exec:
                  command:
                  - echo
                initialDelaySeconds: 30
                periodSeconds: 30
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: {{ CLIENT_SEED.stdout }}-server
        namespace: client-{{ CLIENT_SEED.stdout }}
        labels:
          app: {{ CLIENT_SEED.stdout }}-server
      spec:
        type: ClusterIP
        externalIPs:
        - {{ KUBERNETES_NODE_ADDRESS }}
        ports:
          - port: {{ MC_SERVER_PORT.stdout }}
            targetPort: 25565
            protocol: TCP
        selector:
          app: {{ CLIENT_SEED.stdout }}-server
  tags:
    - copy-k8s-file
    - deploy

- name: Deploy MC server for client {{ CLIENT_SEED.stdout }}
  command: "kubectl apply -f /tmp/minecraft-{{ CLIENT_SEED.stdout }}.yaml"
  tags:
    - deploy

- name: Clean deployment file
  file:
    path: "/tmp/minecraft-{{ CLIENT_SEED.stdout }}.yaml"
    state: absent
  tags:
    - remove-k8s-file
    - deploy

- name: Create CNAME record for {{ CLIENT_SEED.stdout }}
  community.general.cloudflare_dns:
    zone: "{{ DOMAIN }}"
    value: "{{ SUBDOMAIN }}"
    type: CNAME
    record: "{{ CLIENT_SEED.stdout }}.minecraft.{{ DOMAIN }}"
    state: present
    account_email: "{{ CLOUDFLARE_EMAIL }}"
    account_api_token: "{{ CLOUDFLARE_API_TOKEN }}"
  tags:
    - create-dns-cname-record
    - deploy

- name: Create SRV record for {{ CLIENT_SEED.stdout }}
  community.general.cloudflare_dns:
    domain: "{{ DOMAIN }}"
    record: "{{ CLIENT_SEED.stdout }}.minecraft.{{ DOMAIN }}"
    service: _minecraft
    proto: tcp
    port: "{{ MC_SERVER_PORT.stdout }}"
    priority: 0
    weight: 0
    type: SRV
    value: "{{ CLIENT_SEED.stdout }}.minecraft.{{ DOMAIN }}"
    account_email: "{{ CLOUDFLARE_EMAIL }}"
    account_api_token: "{{ CLOUDFLARE_API_TOKEN }}"
  tags:
    - create-dns-srv-record
    - deploy

# To make multiple subdomains work from a single public IP access, we'll
# also need a SRV record for each server deployed pointing to its assigned port
